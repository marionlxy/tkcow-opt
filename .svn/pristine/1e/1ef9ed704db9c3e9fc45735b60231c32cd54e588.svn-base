package com.taikang.tkcoww.moduleDes.controller;

import java.io.File;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Timestamp;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Iterator;
import java.util.Map;
import java.util.List;
import java.util.UUID;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;

import org.apache.commons.fileupload.FileItem;
import org.apache.commons.fileupload.FileItemFactory;
import org.apache.commons.fileupload.FileUploadException;
import org.apache.commons.fileupload.disk.DiskFileItemFactory;
import org.apache.commons.fileupload.servlet.ServletFileUpload;
import org.apache.commons.lang.StringUtils;
import org.apache.commons.lang.time.DateUtils;
import org.springframework.stereotype.Controller;

import com.taikang.udp.common.util.CommUtil;
import com.taikang.udp.file.controller.FileUploadController;
import com.taikang.udp.framework.core.persistence.pagination.CurrentPage;
import com.taikang.udp.framework.core.properties.PropertiesFile;
import com.taikang.udp.framework.core.properties.PropertiesHandler;
import com.taikang.udp.framework.core.properties.PropertiesHandlerFactory;
import com.taikang.udp.framework.common.datastructre.Dto;

import java.util.HashMap;

import com.taikang.udp.framework.common.datastructre.impl.BaseDto;

import javax.annotation.Resource;

import com.taikang.udp.framework.core.web.BaseController;
import com.taikang.udp.sys.action.IFileloadAction;
import com.taikang.tkcoww.banner.action.IBannerAction;
import com.taikang.tkcoww.banner.action.impl.BannerActionImpl;
import com.taikang.tkcoww.module.action.IModuleAction;
import com.taikang.tkcoww.moduleContent.action.IModuleContentAction;
import com.taikang.tkcoww.moduleDes.action.IModuleDesAction;
import com.taikang.tkcoww.moduleDes.model.ModuleDesBO;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Arrays;


/**
  * ModuleDesController
  */
@Controller("moduleDesController")
@RequestMapping(value="/moduleDes")
public class ModuleDesController  extends BaseController  {
		
	@Resource(name=IModuleDesAction.ACTION_ID)
	private IModuleDesAction moduleDesAction;
	@Resource(name=IModuleAction.ACTION_ID)
	private IModuleAction moduleAction;
	@Resource(name = IModuleContentAction.ACTION_ID)
	private IModuleContentAction moduleContentAction;
	@Resource(name = IBannerAction.ACTION_ID)
	private IBannerAction bannerAction;
	
	@Resource(name = "fileloadAction")
	private IFileloadAction fileloadAction;
		
	/**
	 * 打开 不带图列表模板 列表  页面
	 * @return 页面地址
	 */
	@RequestMapping("/withoutImgListModuleIndex")
	public String withoutImgListModuleIndex() {
		return "moduleDes/withoutImgListModuleIndex"; 
	}
	/**
	 * 打开 logo列表模板 列表  页面
	 * @return 页面地址
	 */
	@RequestMapping("/logoListModuleIndex")
	public String logoListModuleIndex() {
		return "moduleDes/logoListModuleIndex"; 
	}
	@RequestMapping("/upload")
	public void upload(HttpServletRequest request,
			HttpServletResponse response) {
		try {
			String fileUrl = fileloadAction.uploadEditor(request);
			   response.setContentType("text/html; charset=UTF-8");
	            response.setHeader("Cache-Control", "no-cache");
	            PrintWriter out = response.getWriter();
	            // 上传文件的返回地址
              fileUrl = StringUtils.replace(fileUrl, "//", "/");
              fileUrl = CommUtil.RELATION_UPLOAD_FILEPATH+"/"+fileUrl;
              // 将上传的图片的url返回给ckeditor
              String callback = request.getParameter("CKEditorFuncNum");
              out.println("<script type=\"text/javascript\">");
              out.println("window.parent.CKEDITOR.tools.callFunction("
                      + callback + ",'" + fileUrl + "',''" + ")");
              out.println("</script>");
              
              out.flush();
    	      out.close();

		} catch (Exception e) {
		}
		 return;
	}
	    
	/**
	 * 打开主查询页面
	 * @return 页面地址
	 */
	@RequestMapping("")
	public String showModuleDesIndexPage() {
		return "moduleDes/moduleDesIndex"; 
	}
	
	/**
	 * 查询信息列表
	 * @return 分页列表数据
	 */
	@RequestMapping("/list")
	@ResponseBody
	public Map<String,Object> getModuleDesList(HttpServletRequest request,CurrentPage page){
		Map<String, Object> map = new HashMap<String, Object>();
		
		page.setParamObject(getParamAsDto(request));
		CurrentPage currentPage = moduleDesAction.queryForPage(page);
		
		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());
		
		return map;
	}
	/**
	 * 查询  不带图列表模板 列表  页面
	 * @return 分页列表数据
	 */
	@RequestMapping("/getWithoutImgListModuleList")
	@ResponseBody
	public Map<String,Object> getWithoutImgListModuleList(HttpServletRequest request,CurrentPage page){
		Map<String, Object> map = new HashMap<String, Object>();
		
		page.setParamObject(getParamAsDto(request));
		CurrentPage currentPage = moduleDesAction.getWithoutImgListModuleList(page);
		
		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());
		
		return map;
	}

	/**
	 * 打开新增或修改页面
	 * @return
	 */
	@RequestMapping("edit")
	public String showModuleDesEditPage(String rowId,Model model) {
		
		if(rowId!=null && !rowId.equals(""))
		{
			model.addAttribute("rowId",rowId );
		}
		
		return "moduleDes/moduleDesEdit"; 
	}
	/**
	 * 不带图列表模板 修改页面
	 * @return
	 */
	@RequestMapping("/withoutImgListModuleEdit")
	public String withoutImgListModuleEdit(String modIdAndContentId,Model model) {
		

		
		if(modIdAndContentId!=null && !modIdAndContentId.equals(""))
		{
			String [] str = modIdAndContentId.split(",");
			
			String modId = str[0];
			String contentId = str[1];
			
			model.addAttribute("modId",modId);
			model.addAttribute("contentId",contentId);
			model.addAttribute("modIdAndContentId",modIdAndContentId);
		}
		
		return "moduleDes/withoutImgListModuleEdit"; 
	}
	
	/**
	 * 新增 不带图列表模板 
	 * @return
	 */
	@RequestMapping("/withoutImgListModuleAdd")
	public String withoutImgListModuleAdd() {
		return "moduleDes/withoutImgListModuleAdd"; 
	}
	/**
	 * 新增 内容模板
	 * @return
	 */
	@RequestMapping("add")
	public String moduleDesAdd() {
		return "moduleDes/moduleDesAdd"; 
	}
	
	/**
	 * 获取一条记录详细信息，用来填充修改界面
	 * @return
	 */
	@RequestMapping("/getOne")
	@ResponseBody
	public Dto getModuleDesById(@RequestParam("modIdAndContentId")String modIdAndContentId)
	{
		
		String [] str = modIdAndContentId.split(",");
		
		String modId = str[0];
		String contentId = str[1];
		
		Dto paramDes = new BaseDto();
		Dto paramContent = new BaseDto();
		paramDes.put("modId", modId);
		paramContent.put("contentId", contentId);
		
		
		
		paramDes =  moduleDesAction.findOne(paramDes);
		paramContent =  moduleContentAction.findOne(paramContent);
		
		System.out.println(paramDes);
		System.out.println(paramContent);
		
		return paramDes;
	}
	
	/**
	 * 保存新增或修改的记录，将其持久化到数据库中
	 * @return
	 */
	@RequestMapping("/save")
	@ResponseBody
	private Map<String,String> saveModuleDesInfo(HttpServletRequest request)
	{
		Map<String,String> map=new HashMap<String,String>();
		
		Dto param = getParamAsDto(request);
		if(param.get("rowId") ==null ||"".equals(param.get("rowId")))
		{
			String modId = UUID.randomUUID().toString().replace("-", "");
			param.put("modId", modId);
			//创建时间
			param.put("createdTime", new Timestamp(System.currentTimeMillis()));
			
			//将 modId 插入到 zjow_module 表中
			
			moduleAction.insertObject(param);
			moduleDesAction.insertObject(param);
			
			map.put("modId", modId);
			map.put("sId", modId);
			
			map.put(MESSAGE_INFO, "新增成功！");
		}
		else
		{
			moduleDesAction.updateObject(param);
			map.put(MESSAGE_INFO, "更新成功！");
		}
		map.put(RTN_RESULT, "true");
		
		return map;
	}
	/**
	 * 内容模板··保存
	 * @return
	 */
	@RequestMapping("/saveModuleDesInfo")
	@ResponseBody
	private Map<String,String> saveContentModule(HttpServletRequest request)
	{
		Map<String,String> map=new HashMap<String,String>();
		
		Dto param = getParamAsDto(request);
		if(param.get("rowId") ==null ||"".equals(param.get("rowId")))
		{
			String modId = UUID.randomUUID().toString().replace("-", "");
			String banId_new = UUID.randomUUID().toString().replace("-", "");
			param.put("modId", modId);
			//创建时间
			param.put("createdTime", new Timestamp(System.currentTimeMillis()));
			String imgList = param.getAsString("bannerList");
			String ll ="{info:"+imgList+"}";
			JSONObject paramStr=JSONObject.fromObject(ll);
		
			JSONArray bannerList = paramStr.getJSONArray("info");
			System.out.println(bannerList);
			for(int i =0 ; i < bannerList.size(); i++){
				String banImgNum = bannerList.getJSONObject(i).getString("BAN_IMG_NUM");
//				String banImgId = bannerList.getJSONObject(i).getString("BAN_IMG_ID");
				String banImgUrl = bannerList.getJSONObject(i).getString("BAN_IMG_URL");
//				String banId = bannerList.getJSONObject(i).getString("BAN_ID");
				String banImgName = bannerList.getJSONObject(i).getString("BAN_IMG_NAME");
				String banImgRename = bannerList.getJSONObject(i).getString("BAN_IMG_RENAME");
				System.out.println(banImgNum);
				
				//banner 表
				Dto paramBanner = new BaseDto();
				String banImgId = UUID.randomUUID().toString().replace("-", "");
				paramBanner.put("belongId", modId);//所属模块或者内容ID
				paramBanner.put("banId", banId_new);//bannerId
				paramBanner.put("banImgId", banImgId);//图片Id
				paramBanner.put("banImgName", banImgName);//图片名
				paramBanner.put("banImgUrl", banImgUrl);//图片URL
				paramBanner.put("banImgNum", banImgNum);//权重号  图片序号
				paramBanner.put("banImgRename", banImgRename);//图片重命名名
				paramBanner.put("delflag", "0");//删除标记
				paramBanner.put("createdTime", new Timestamp(System.currentTimeMillis()));//时间
				
				bannerAction.insertObject(paramBanner);
			}
			//将 modId 插入到 zjow_module 表中
			
			moduleAction.insertObject(param);
			moduleDesAction.insertObject(param);
			
			//zjow_module_content表
			String contentId = UUID.randomUUID().toString().replace("-", "");
			param.put("contentId", contentId);
			param.put("modNumber", "999");
			param.put("hasBanner", "0");
			param.put("content", param.get("editor"));
			param.put("isDisplay", "0");

			moduleContentAction.insertObject(param);
			
			
			//根据  图片ID update  banner表
			
			map.put("modId", modId);
			map.put("sId", modId);
			
			map.put(MESSAGE_INFO, "新增成功！");
		}
		else
		{
			moduleDesAction.updateObject(param);
			map.put(MESSAGE_INFO, "更新成功！");
		}
		map.put(RTN_RESULT, "true");
		
		return map;
	}
	
	/**
	 * 不带图列表模板 ·· 保存
	 * @return
	 */
	@RequestMapping("/saveWithoutImgListModule")
	@ResponseBody
	private Map<String,String> saveWithoutImgListModule(HttpServletRequest request)
	{
		Map<String,String> map=new HashMap<String,String>();
		
		Dto param = getParamAsDto(request);
		if(param.get("rowId") ==null ||"".equals(param.get("rowId")))
		{
			String modId = UUID.randomUUID().toString().replace("-", "");
			String banId_new = UUID.randomUUID().toString().replace("-", "");
			param.put("modId", modId);
			//创建时间
			param.put("createdTime", new Timestamp(System.currentTimeMillis()));
			//将 modId 插入到 zjow_module 表中
			
			moduleAction.insertObject(param);
			moduleDesAction.insertObject(param);
			
			//zjow_module_content表
			String contentId = UUID.randomUUID().toString().replace("-", "");
			param.put("contentId", contentId);
			param.put("modNumber", "99");
//			param.put("hasBanner", "0");
			param.put("content", param.get("editor_name"));
			param.put("isDisplay", "0");
			
			moduleContentAction.insertObject(param);
			
			
			//根据  图片ID update  banner表
			
			map.put("modId", modId);
			map.put("sId", modId);
			
			map.put(MESSAGE_INFO, "新增成功！");
		}
		else
		{
			moduleDesAction.updateObject(param);
			map.put(MESSAGE_INFO, "更新成功！");
		}
		map.put(RTN_RESULT, "true");
		
		return map;
	}
	
	/**
	 * 不带图列表模板 ·· 编辑 
	 * @return
	 */
	@RequestMapping("/updateWithoutImgListModule")
	@ResponseBody
	private Map<String,String> updateWithoutImgListModule(HttpServletRequest request)
	{
		Map<String,String> map=new HashMap<String,String>();
		
		Dto param = getParamAsDto(request);
		
		moduleDesAction.updateObject(param);
		moduleContentAction.updateObject(param);
		map.put(MESSAGE_INFO, "更新成功！");
		
		return map;
	}
	
	
	/**
	 * banner图替换   图片上传
	 * @return
	 */
	@RequestMapping("/uploadBySpringGrpModuleDes")
	public String uploadBySpringGrpModuleDes(HttpServletRequest request){
		
		Map<String, String> map = new HashMap<String, String>();
		String modId = request.getParameter("modId");
		try {
			String pictureUrl = moduleDesAction.uploadBySpringGrpModuleDes(request);
		} catch (Exception e) {
		}
		
		return "moduleDes/moduleDesAdd";
	}
	
	/**
	 * 弹出框
	 * @return
	 */
	@RequestMapping("/showImgsAddPage")
	public String showImgsAddPage(){
		
		return "moduleDes/imgsAdd";
	}
	
	/**
	*删除一条或多条记录
	*/
	@RequestMapping(value="/del")
	@ResponseBody
	public Map<String, String> deleteModuleDes(@RequestParam("rowId") String rowId) {
		Map<String, String> map = new HashMap<String, String>();
		Dto param = new BaseDto();
		param.put("rowId", rowId);
		moduleDesAction.deleteObject(param);
		
		map.put(RTN_RESULT, "true");
		map.put(MESSAGE_INFO, "操作成功！");
		
		return map;
	}
}


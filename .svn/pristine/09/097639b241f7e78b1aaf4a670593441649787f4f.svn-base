package com.taikang.tkcoww.moduleContent.controller;

import java.io.File;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONObject;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.taikang.tkcoww.logo.action.ICooperLogoAction;
import com.taikang.tkcoww.module.action.IModuleAction;
import com.taikang.tkcoww.moduleContent.action.IModuleContentAction;
import com.taikang.tkcoww.moduleDes.action.IModuleDesAction;
import com.taikang.udp.common.constant.Globals;
import com.taikang.udp.common.constant.UploadVertor;
import com.taikang.udp.common.util.CommUtil;
import com.taikang.udp.common.util.FileHelper;
import com.taikang.udp.common.util.ProperHelper;
import com.taikang.udp.common.util.WebUtil;
import com.taikang.udp.framework.common.datastructre.Dto;
import com.taikang.udp.framework.common.datastructre.impl.BaseDto;
import com.taikang.udp.framework.core.persistence.pagination.CurrentPage;
import com.taikang.udp.framework.core.web.BaseController;
import com.taikang.udp.security.service.SecurityUserHolder;
import com.taikang.udp.sys.util.CommonUtil;
@Controller("LogoModuleController")
@RequestMapping(value="/logoModule")
public class LogoModuleController extends BaseController {
	/**
	 * 模块service
	 */
	@Resource(name = IModuleAction.ACTION_ID)
	private IModuleAction moduleAction;
	/**
	 * 模块模板service
	 */
	@Resource(name=IModuleContentAction.ACTION_ID)
	private IModuleContentAction moduleContentAction;
	
	/**
	 * 内容模板service
	 */
	@Resource(name=IModuleDesAction.ACTION_ID)
	private IModuleDesAction moduleDesAction;
	/**
	 * logoservice
	 */
	@Resource(name = ICooperLogoAction.ACTION_ID)
	private ICooperLogoAction cooperLogoAction;
	
	


	/**
	 * 打开新增或修改页面
	 * @return
	 */
	@RequestMapping("/addLogoModel")
	public String addLogoModel(String rowId,Model model) {
		
		if(rowId!=null && !rowId.equals(""))
		{
			model.addAttribute("rowId",rowId );
		}
		
		return "module/logModelAdd"; 
	}
	
	


	
	/**
	 * 保存logo模板
	 * @return
	 */
	@SuppressWarnings({ "rawtypes", "unchecked" })
	@RequestMapping("/saveLogoModel")
	@ResponseBody
	public ResponseEntity<String> saveLogoModel(HttpServletRequest request,Model model) {
		     //定义响应参数的格式防止弹出下载框
				HttpHeaders  resHeader = new HttpHeaders();
				resHeader.setContentType(MediaType.TEXT_HTML);

				MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
				Map<String, String> map = new HashMap<String, String>();
				Dto paramAsDto = getParamAsDto(request);//获得前台参数
			
				String banerpath =(String) (ProperHelper.BANNERFODLER != null ? ProperHelper.BANNERFODLER
						: FileHelper.buildFolder(request));// 获取tomcat目录
				CommUtil.createFolder(banerpath);

				String[] extendes = (Globals.DEFAULT_IMAGE_SUFFIX).split("[|]");

				String bannerFilename = null;//文件名字
				String saveBannerName = null;//原文件名字
				Map<String, Object> mapban = null;
				String realBannerPath = null;
				// 保存banner到服务器
				try {
					MultipartFile fmodBanner = multiRequest.getFile("modBanner");
					bannerFilename = fmodBanner.getOriginalFilename();
					logger.info("开始上传文件:" + bannerFilename);
					
					saveBannerName = CommonUtil.generateFileName(FilenameUtils
							.getExtension(bannerFilename));//重命名
					
					mapban = WebUtil.saveFileToServer(multiRequest, "modBanner",
							banerpath, saveBannerName, extendes);//上传文件方法
					
					realBannerPath = request.getSession().getServletContext()
							.getRealPath(UploadVertor.FILE_UPLOAD_BANNER);
					FileUtils.copyInputStreamToFile(fmodBanner.getInputStream(),
							new File(realBannerPath, saveBannerName));//获得http相对路径
					
				} catch (IOException e) {
					// TODO Auto-generated catch block
					e.printStackTrace();
				}

				map.put(RTN_RESULT, "true");
				String modId=null;
				if ((!mapban.isEmpty())&&!((List) mapban.get("error")).isEmpty()
						&& ((List) mapban.get("error")) != null) {
					map.put(MESSAGE_INFO, "新增失败！" + mapban.get("error"));
				}  else {
				
					modId = UUID.randomUUID().toString().replace("-", "");	 
					paramAsDto.put("modId", modId);
					int modLevel=Integer.parseInt(paramAsDto.getAsString("modLevel"))+1;
					paramAsDto.put("modLevel",modLevel);
					int modIsleaf=Integer.parseInt(paramAsDto.getAsString("modIsleaf"));
					// 创建时间
					Timestamp timestamp = new Timestamp(System.currentTimeMillis());
					paramAsDto.put("createdTime",timestamp);
					if(modLevel==4){
						paramAsDto.put("modIsleaf", "1");// "1"表示叶子节点
					}else{
						paramAsDto.put("modIsleaf", "0");
					}
			
					paramAsDto.put("createdBy", SecurityUserHolder.getCurrentUser()==null?null:String.valueOf(SecurityUserHolder.getCurrentUser().getUsername()));
					paramAsDto.put("delflag", "0");
					// 保存先保存到到主表
					moduleAction.insertObject(paramAsDto);
					//保存到menu
					Dto menuDto=new BaseDto();
					Dto findOne=null;
					do {
						int menuId=Integer.parseInt(CommUtil.randomInt(5));
						menuDto.put("menuId", menuId);
					} while (!findOne.isEmpty());
					menuDto.put("parentId", paramAsDto.getAsString("parentId")+"|"+paramAsDto.getAsString("menuId"));
					menuDto.put("isLeaf", paramAsDto.getAsString("modIsleaf"));
					menuDto.put("menuName", paramAsDto.getAsString("modName"));
					if(modLevel==4){
						paramAsDto.put("menuUrl", "");// "1"表示叶子节点
					}else{
						menuDto.put("menuUrl", "/module/subList");
					}
					
					//跳转到
					map.put(MESSAGE_INFO, "新增成功！");
					map.put(RTN_RESULT, "true");
					
					map.put("reqMenuId", paramAsDto.getAsString("menuId"));
					map.put("menuName", paramAsDto.getAsString("menuName"));
					map.put("backUp2", paramAsDto.getAsString("modParentId"));

				}
				logger.info("结束文件上传:" + bannerFilename );
				String  json= JSONObject.fromObject(map).toString();
				return new ResponseEntity<String>(json,resHeader,HttpStatus.OK);
	}
	
	
	
	/**
	 * 跳转logo模板内容页面
	 * @return 页面地址
	 */
	@RequestMapping("")
	public String showModuleContentIndexPage() {
		return "module/logoModuleIndex"; 
	}
	
	/**
	 * logo模板内容分页
	 * @return 分页列表数据
	 */
	@RequestMapping("/list")
	@ResponseBody
	public Map<String,Object> getModuleContentList(HttpServletRequest request,CurrentPage page){
		Map<String, Object> map = new HashMap<String, Object>();
		
		page.setParamObject(getParamAsDto(request));
		CurrentPage currentPage = cooperLogoAction.getLogoModelPage(page);
		
		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());
		
		return map;
	}
	
	/**
	 * 添加logo模板内容
	 * @return
	 */
	@RequestMapping("/addLogoImge")
	public String addLogoImge(Model model) {
		Dto param = new BaseDto();
		List<Dto> logoNameList = cooperLogoAction.findAll(param);
		model.addAttribute("logoNameList",logoNameList);
		return "module/logoAdd"; 
	}
	
	
	/**
	 * 跳转修改页面
	 * @return
	 */
	@RequestMapping("/editLogoImge")
	public String editLogoImge(String cooperLogoId,Model model) {
	     model.addAttribute("cooperLogoId",cooperLogoId );
		return "module/logoEdit"; 
	}
	
	/**
	 * 获得logo模板的基本信息
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("/getOne")
	@ResponseBody
	public Dto getModuleContentById(@RequestParam("cooperLogoId")String cooperLogoId)
	{
		Dto param = new BaseDto();
		param.put("cooperLogoId", cooperLogoId);
		return cooperLogoAction.findOne(param);
	}
	
	/**
	*删除logo模板内容
	*/
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/del")
	@ResponseBody
	public Map<String, String> deleteModuleContent(@RequestParam("cooperLogoId") String cooperLogoId) {
		Map<String, String> map = new HashMap<String, String>();
		Dto param = new BaseDto();
		param.put("cooperLogoId", cooperLogoId);
		param.put("logoSquence", "");
		param.put("belongId", "");
		cooperLogoAction.updateObject(param);
		
		map.put(RTN_RESULT, "true");
		map.put(MESSAGE_INFO, "操作成功！");
		
		return map;
	}
	
	/**
	 * 保存logo模板内容
	 * @return
	 */
	@RequestMapping("/saveLogoInfo")
	@ResponseBody
	private Map<String,String> saveLogoInfo(HttpServletRequest request)
	{
		Map<String,String> map=new HashMap<String,String>();
		
		Dto param = getParamAsDto(request);
	
		cooperLogoAction.updateObject(param);
		map.put(MESSAGE_INFO, "更新成功！");
		
		map.put(RTN_RESULT, "true");
		
		return map;
	}
	
}

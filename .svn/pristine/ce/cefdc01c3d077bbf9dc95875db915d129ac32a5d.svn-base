/**
 * 
 */
package com.taikang.tkcoww.module.controller;

import java.io.File;
import java.io.IOException;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONObject;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.taikang.tkcoww.banner.action.IBannerAction;
import com.taikang.tkcoww.module.action.IModuleAction;
import com.taikang.tkcoww.moduleContent.action.IModuleContentAction;
import com.taikang.tkcoww.moduleDes.action.IModuleDesAction;
import com.taikang.tkcoww.moduleImg.action.IModuleImgAction;
import com.taikang.udp.common.constant.Globals;
import com.taikang.udp.common.constant.UploadVertor;
import com.taikang.udp.common.util.CommUtil;
import com.taikang.udp.common.util.FileHelper;
import com.taikang.udp.common.util.ProperHelper;
import com.taikang.udp.common.util.WebUtil;
import com.taikang.udp.framework.common.datastructre.Dto;
import com.taikang.udp.framework.common.datastructre.impl.BaseDto;
import com.taikang.udp.framework.core.web.BaseController;
import com.taikang.udp.security.service.SecurityUserHolder;
import com.taikang.udp.sys.action.IMenuAction;
import com.taikang.udp.sys.action.IRoleMenuAction;
import com.taikang.udp.sys.action.IUserRoleAction;
import com.taikang.udp.sys.util.CommonUtil;

/**
 * TODO ColumnIntroController.java
 * 
 * @author itw_lixy02
 * @date 2016年2月2日下午12:52:39
 */
@Controller("ColumnIntroController")
@RequestMapping(value = "/Conlumn")
public class ColumnIntroController extends BaseController {
	@Resource(name = IUserRoleAction.ACTION_ID)
	private IUserRoleAction userRoleAction;
	
	@Resource(name = IModuleAction.ACTION_ID)
	private IModuleAction moduleAction;

	@Resource(name = IModuleDesAction.ACTION_ID)
	private IModuleDesAction moduleDesAction;

	@Resource(name = IBannerAction.ACTION_ID)
	private IBannerAction bannerAction;

	@Resource(name = IModuleImgAction.ACTION_ID)
	private IModuleImgAction moduleImgAction;

	@Resource(name = IMenuAction.ACTION_ID)
	private IMenuAction menuAction;
	
	@Resource(name = IRoleMenuAction.ACTION_ID)
	private IRoleMenuAction roleMenuAction;
	/**
	 * 新增栏目介绍
	 * 
	 * @return
	 */
	@RequestMapping("addColIntroduce")
	public String addColIntroduceColPage(HttpServletRequest request, Model model) {
		Dto paramAsDto = getParamAsDto(request);
		String modId = paramAsDto.getAsString("modId");
		if (modId != null && !modId.equals("")) {
			String mName = CommUtil.convert(paramAsDto.getAsString("modName"),
					"UTF-8");
			model.addAttribute("modParentName", mName);
			model.addAttribute("modParentId", paramAsDto.getAsString("modId"));
			model.addAttribute("menuType", paramAsDto.getAsString("menuType"));
			model.addAttribute("modIsleaf", paramAsDto.getAsString("modIsleaf"));
			model.addAttribute("modLevel", paramAsDto.getAsString("modLevel"));
			model.addAttribute("menuId", paramAsDto.getAsString("menuId"));
			model.addAttribute("parentId", paramAsDto.getAsString("parentId"));
			
			
		}
		return "colintroduce/moduleColIntrAdd";
	}

	/**
	 * 保存栏目介绍
	 * 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("addFormCol")
	@ResponseBody
	// public Map<String,String> addFormSub(HttpServletRequest request,
	// Model model) {
	public ResponseEntity<String> addFormSub(HttpServletRequest request,
			Model model) {
		// 定义响应参数的格式防止弹出下载框
		HttpHeaders resHeader = new HttpHeaders();
		resHeader.setContentType(MediaType.TEXT_HTML);
		// public String addFormSub(HttpServletRequest request,
		// Model model) {
		MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
		Map<String, String> map = new HashMap<String, String>();
		Dto paramAsDto = getParamAsDto(request);
		// String menId = paramAsDto.getAsString("editor");
		//
		String banerpath = (String) (ProperHelper.BANNERFODLER != null ? ProperHelper.BANNERFODLER
				: FileHelper.buildFolder(request));// 获取tomcat目录
		CommUtil.createFolder(banerpath);

		String smalPath = (String) (ProperHelper.SMALLIMAGE != null ? ProperHelper.SMALLIMAGE
				: FileHelper.buildFolder(request));// 获取tomcat目录
		CommUtil.createFolder(smalPath);

		String[] extendes = (Globals.DEFAULT_IMAGE_SUFFIX).split("[|]");

		String bannerFilename = null;
		String saveBannerName = null;
		Map<String, Object> mapban = null;
		String realBannerPath = null;
		// 保存banner到服务器
		try {
			MultipartFile fmodBanner = multiRequest.getFile("modBanner");
			bannerFilename = fmodBanner.getOriginalFilename();
			// String getFileName2 =
			// FileHelper.getFileName(multiRequest.getFile("modBanner").getName());
			logger.info("开始上传文件:" + bannerFilename);

			saveBannerName = CommonUtil.generateFileName(FilenameUtils
					.getExtension(bannerFilename));
			mapban = WebUtil.saveFileToServer(multiRequest, "modBanner",
					banerpath, saveBannerName, extendes);
			realBannerPath = request.getSession().getServletContext()
					.getRealPath(UploadVertor.FILE_UPLOAD_BANNER);
			FileUtils.copyInputStreamToFile(fmodBanner.getInputStream(),
					new File(realBannerPath, saveBannerName));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

		MultipartFile fmodImg = multiRequest.getFile("modImg");
		String imgFilename = null;
		Map<String, Object> mapimg = null;
		String saveImgName = null;
		String realSmalImgPath = null;
		if (!fmodImg.isEmpty()) {
			imgFilename = fmodImg.getOriginalFilename();
			// 保存小图片到服务器
			saveImgName = CommonUtil.generateFileName(FilenameUtils
					.getExtension(imgFilename));

			try {
				logger.info("开始上传文件:" + imgFilename);
				mapimg = WebUtil.saveFileToServer(multiRequest, "modImg",
						smalPath, saveImgName, extendes);
				realSmalImgPath = request.getSession().getServletContext()
						.getRealPath(UploadVertor.FILE_UPLOAD_SMALIMAGE);
				FileUtils.copyInputStreamToFile(fmodImg.getInputStream(),
						new File(realSmalImgPath, saveImgName));
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		map.put(RTN_RESULT, "true");
		String modId = null;
		if ((!mapban.isEmpty()) && !((List) mapban.get("error")).isEmpty()
				&& ((List) mapban.get("error")) != null) {
			map.put(MESSAGE_INFO, "新增失败！" + mapban.get("error"));
			// return "";
		} else if ((mapimg != null && !mapimg.isEmpty())
				&& !((List) mapimg.get("error")).isEmpty()
				&& ((List) mapimg.get("error")) != null) {
			map.put(MESSAGE_INFO, "新增失败！" + mapimg.get("error"));
			// return "";
		} else {
			// paramAsDto
			modId = UUID.randomUUID().toString().replace("-", "");
			paramAsDto.put("modId", modId);
			int modLevel = Integer.parseInt(paramAsDto.getAsString("modLevel")) + 1;
			paramAsDto.put("modLevel", modLevel);
			int modIsleaf = Integer.parseInt(paramAsDto
					.getAsString("modIsleaf"));
			// 创建时间
			Timestamp timestamp = new Timestamp(System.currentTimeMillis());
			paramAsDto.put("createdTime", timestamp);
			if (modLevel == 4) {
				paramAsDto.put("modIsleaf", "1");// "1"表示叶子节点
			} else {
				paramAsDto.put("modIsleaf", "0");
			}
			// 事实上，paramDto已有数据
			/*
			 * UserBO user = SecurityUserHolder.getCurrentUser(); LoginUser user
			 * = UserUtils.getUser(); String userName =
			 * String.valueOf(user.getUsername());
			 */
			paramAsDto.put(
					"createdBy",
					SecurityUserHolder.getCurrentUser() == null ? null : String
							.valueOf(SecurityUserHolder.getCurrentUser()
									.getUsername()));
			paramAsDto.put("delflag", "0");
			// 保存先保存到到主表
			moduleAction.insertObject(paramAsDto);
			// 保存到menu
			Dto menuDto = new BaseDto();
			Dto findOne = null;
			int menuId =0;
			do {
				menuId = Integer.parseInt(CommUtil.randomInt(5));
				menuDto.put("menuId", menuId);
				findOne = menuAction.findOne(menuDto);

			} while (!findOne.isEmpty());
			menuDto.put("parentId", paramAsDto.getAsString("parentId") + "|"
					+ paramAsDto.getAsString("menuId"));
			menuDto.put("isLeaf", paramAsDto.getAsString("modIsleaf"));
			menuDto.put("menuName", paramAsDto.getAsString("modName"));
			if (modLevel == 4) {
				paramAsDto.put("menuUrl", "");// "1"表示叶子节点
			} else {
				menuDto.put("menuUrl", "/module/subList");
			}
			menuDto.put("menuOrder", 999);
			menuDto.put("menuStatus", 1);
			menuDto.put("Backup2", modId);
			String loginId = SecurityUserHolder.getCurrentUser()==null?null:String.valueOf(SecurityUserHolder.getCurrentUser().getId());
			paramAsDto.put("creator", loginId);
			menuDto.put("createTime", timestamp);
			menuDto.put("isShow", 1);
			menuAction.insertObject(menuDto);
			
			//更新到权限表Dto 
			Dto roleUserDto=new BaseDto();
			roleUserDto.put("userId", loginId);
			Dto roleUseOne = userRoleAction.findOne(roleUserDto);
			Dto roleMenuDto=new BaseDto();
			roleMenuDto.put("roleId", roleUseOne.getAsString("roleId"));
			roleMenuDto.put("menuId", menuId);
			roleMenuDto.put("creator", loginId);
			roleMenuDto.put("createTime", timestamp);
			roleMenuAction.insertObject(roleMenuDto);
			// 获得http服务器路径
			String bannerUrl = WebUtil.getURL(request) + ""
					+ UploadVertor.FILE_UPLOAD_BANNER + "/" + saveBannerName;
			String imgUrl = WebUtil.getURL(request) + ""
					+ UploadVertor.FILE_UPLOAD_SMALIMAGE + "/" + saveImgName;
			String banImgId = UUID.randomUUID().toString().replace("-", "");
			paramAsDto.put("banImgId", banImgId);

			paramAsDto.put("modBanner", banImgId);
			paramAsDto.put("modType", "02");
			String modImgId = UUID.randomUUID().toString().replace("-", "");
			paramAsDto.put("modImgId", modImgId);
			paramAsDto.put("modImg", modImgId);
			//
			moduleDesAction.insertObject(paramAsDto);

			// 更新到banner表中

			String banId = UUID.randomUUID().toString().replace("-", "");
			paramAsDto.put("banId", banId);
			paramAsDto.put("banImgName", bannerFilename);
			paramAsDto.put("belongId", modId);
			paramAsDto.put("banImgUrl", bannerUrl);

			paramAsDto.put("banImgDes", "下级banner图");
			paramAsDto.put("banImgOutside", "");
			paramAsDto.put("banImgNum", "999");
			paramAsDto.put("banImgRename", saveBannerName);
			bannerAction.insertObject(paramAsDto);

			if (!fmodImg.isEmpty()) {
				// 小图

				paramAsDto.put("modImgName", bannerFilename);
				// paramAsDto.put("belongId", modId);
				paramAsDto.put("modImgUrl", imgUrl);
				paramAsDto.put("modImgNum", "999");
				paramAsDto.put("modImgRename", saveImgName);
				paramAsDto.put("modImgDes", "下级小图片");
				paramAsDto.put("modImgOutside", "");
				moduleImgAction.insertObject(paramAsDto);
			}
			// 跳转到
			map.put(MESSAGE_INFO, "新增成功！");
			map.put(RTN_RESULT, "true");

			map.put("reqMenuId", paramAsDto.getAsString("menuId"));
			map.put("menuName", paramAsDto.getAsString("menuName"));
			map.put("backUp2", paramAsDto.getAsString("modParentId"));
			// model.addAttribute(MESSAGE_INFO, "新增成功！");
			// model.addAttribute(RTN_RESULT, true);
		}
		logger.info("结束文件上传:" + bannerFilename + "|" + imgFilename);
		String json = JSONObject.fromObject(map).toString();
		return new ResponseEntity<String>(json, resHeader, HttpStatus.OK);
	}
}

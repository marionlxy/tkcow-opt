package com.taikang.tkcoww.orderVisit.controller;


import com.taikang.tkcoww.orderVisit.action.IOrderVisitAction;

import java.io.BufferedInputStream;
import java.io.BufferedOutputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.ArrayList;
import java.util.Map;
import java.util.List;

import org.springframework.stereotype.Controller;

import com.taikang.udp.common.util.ExcelUtil;
import com.taikang.udp.framework.core.persistence.pagination.CurrentPage;
import com.taikang.udp.framework.common.datastructre.Dto;

import java.util.HashMap;

import com.taikang.udp.framework.common.datastructre.impl.BaseDto;
import com.taikang.udp.framework.common.util.TKDateTimeUtils;

import javax.annotation.Resource;

import com.taikang.udp.framework.core.web.BaseController;
import com.taikang.udp.security.service.SecurityUserHolder;

import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.ui.Model;

import javax.servlet.ServletOutputStream;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.web.bind.annotation.ResponseBody;

import java.util.Arrays;


/**
  * OrderVisitController
  */
@Controller("orderVisitController")
@RequestMapping(value="/orderVisit")
public class OrderVisitController  extends BaseController  {
		
	@Resource(name=IOrderVisitAction.ACTION_ID)
	private IOrderVisitAction orderVisitAction;
		
	/**
	 * 打开主查询页面
	 * @return 页面地址
	 */
	@RequestMapping("")
	public String showOrderVisitIndexPage() {
		return "ordervisit/ordervisitIndex"; 
	}
	
	/**
	 * 查询信息列表
	 * @return 分页列表数据
	 */
	@RequestMapping("/list")
	@ResponseBody
	public Map<String,Object> getOrderVisitList(HttpServletRequest request,CurrentPage page){
		Map<String, Object> map = new HashMap<String, Object>();
		
		page.setParamObject(getParamAsDto(request));
		CurrentPage currentPage = orderVisitAction.getOrderVisitList(page);
		
		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());
		
		return map;
	}

	/**
	 * 打开新增或修改页面
	 * @return
	 */
	@RequestMapping("edit")
	public String showOrderVisitEditPage(String visitId,Model model) {
		
		if(visitId!=null && !visitId.equals(""))
		{
			model.addAttribute("visitId",visitId);
		}
		
		return "ordervisit/ordervisitEdit"; 
	}
	
	/**
	 * 获取一条记录详细信息，用来填充修改界面
	 * @return
	 */
	@RequestMapping("/getOne")
	@ResponseBody
	public Dto getOrderVisitById(@RequestParam("visitId")String visitId)
	{
		Dto param = new BaseDto();
		param.put("visitId", visitId);
		return orderVisitAction.findOne(param);
	}
	
	/**
	 * 保存新增或修改的记录，将其持久化到数据库中
	 * @return
	 */
	@RequestMapping("/save")
	@ResponseBody
	private Map<String,String> saveOrderVisitInfo(HttpServletRequest request)
	{
		Map<String,String> map=new HashMap<String,String>();
		
		Dto param = getParamAsDto(request);
		if(param.get("visitId") ==null ||"".equals(param.get("visitId")))
		{
			orderVisitAction.insertObject(param);
			map.put(MESSAGE_INFO, "新增成功！");
		}
		else
		{
			orderVisitAction.updateObject(param);
			map.put(MESSAGE_INFO, "更新成功！");
		}
		map.put(RTN_RESULT, "true");
		
		return map;
	}
	
	/**
	*删除一条或多条记录
	*/
	@SuppressWarnings("unchecked")
	@RequestMapping(value="/del")
	@ResponseBody
	public Map<String, String> deleteOrderVisit(@RequestParam("visitId") String visitId) {
		Map<String, String> map = new HashMap<String, String>();
		Dto param = new BaseDto();
		Dto user = SecurityUserHolder.getCurrentUser().toDto();
	
		param.put("visitId", visitId);
		param.put("modifiedTime", TKDateTimeUtils.getTodayTimeStamp());
		param.put("modifiedBy", user.getAsString("id"));
		param.put("delflag", "1");
		orderVisitAction.updateObject(param);
		
		map.put(RTN_RESULT, "true");
		map.put(MESSAGE_INFO, "操作成功！");
		
		return map;
	}
	
	/**
	 * 导出excel
	 * @param request
	 * @param response
	 * @return
	 * @throws IOException
	 */
	  @RequestMapping(value="/downloadOrderVisit")
	    public String downloadOrderVisit(HttpServletRequest request,HttpServletResponse response) throws IOException{
	        String fileName="excel";
	        String visitTel =request.getParameter("visitTel");
	        byte[] newvisitName =request.getParameter("visitName").getBytes("iso-8859-1");
	        String visitName = new String(newvisitName,"UTF-8");
	        String startTime =request.getParameter("startTime");
	        String endTime =request.getParameter("endTime");//endTime
	        String visitFrom =request.getParameter("visitFrom");//endTime
	        
	        //填充projects数据
	        List<Dto> projects=createData(visitTel,visitName,startTime,endTime,visitFrom);
	        
	        List<Map<String,Object>> list=createExcelRecord(projects);
	        String columnNames[]={"联系人","联系电话","参观人数","预约时间","预约场所","年龄","性别","养老服务","备注","来源","IP","提交时间"};//列名
	        String keys[]   =    {"visitName","visitTel","visitCount","visitTime","visitSite","visitAge","visitSex","visitService","visitBak","visitFrom","userIp","createdTime"};//map中的key
	        
	        ByteArrayOutputStream os = new ByteArrayOutputStream();
	        try {
	            ExcelUtil.createWorkBook(list,keys,columnNames).write(os);
	        } catch (IOException e) {
	            e.printStackTrace();
	        }
	        byte[] content = os.toByteArray();
	        InputStream is = new ByteArrayInputStream(content);
	        // 设置response参数，可以打开下载页面
	        response.reset();
	        response.setContentType("application/vnd.ms-excel;charset=utf-8");
	        response.setHeader("Content-Disposition", "attachment;filename="+ new String((fileName + ".xls").getBytes(), "iso-8859-1"));
	        ServletOutputStream out = response.getOutputStream();
	        BufferedInputStream bis = null;
	        BufferedOutputStream bos = null;
	        try {
	            bis = new BufferedInputStream(is);
	            bos = new BufferedOutputStream(out);
	            byte[] buff = new byte[2048];
	            int bytesRead;
	            while (-1 != (bytesRead = bis.read(buff, 0, buff.length))) {
	                bos.write(buff, 0, bytesRead);
	            }
	        } catch (final IOException e) {
	            throw e;
	        } finally {
	            if (bis != null)
	                bis.close();
	            if (bos != null)
	                bos.close();
	        }
	        return null;
	    }
	  
	    @SuppressWarnings("unchecked")
		private List<Dto> createData(String visitTel,String visitName,String startTime,String endTime,String visitFrom){
	    	Dto param = new BaseDto();
	    	if(visitTel != null){
	    		param.put("visitTel", visitTel);
	    	}
	    	if(visitName != null){
	    		param.put("visitName", visitName);
	    	}
	    	if(startTime != null){
	    		param.put("startTime", startTime);
	    	}
	    	if(endTime != null){
	    		param.put("endTime", endTime);
	    	}
	    	if(visitFrom != null){
	    		param.put("visitFrom", visitFrom);
	    	}
	    	List <Dto> list = orderVisitAction.getvisitList(param);
	        return list;
	    }
	    
	    private List<Map<String, Object>> createExcelRecord(List<Dto> projects) {
	        List<Map<String, Object>> listmap = new ArrayList<Map<String, Object>>();
	        Map<String, Object> map = new HashMap<String, Object>();
	        map.put("sheetName", "sheet1");
	        listmap.add(map);
	        Dto temp=null;
	        for (int j = 0; j < projects.size(); j++) {
	        	temp=projects.get(j);
	            Map<String, Object> mapValue = new HashMap<String, Object>();
	            mapValue.put("visitName",temp.getAsString("VISIT_NAME"));
	            mapValue.put("visitTel",temp.getAsString("VISIT_TEL"));
	            mapValue.put("visitCount", temp.getAsString("VISIT_COUNT"));
	            mapValue.put("visitTime", temp.getAsString("VISIT_TIME"));
	            mapValue.put("visitSite",temp.getAsString("VISIT_SITE"));
	            mapValue.put("visitAge",temp.getAsString("VISIT_AGE"));
	            mapValue.put("visitSex",temp.getAsString("VISIT_SEX"));
	            mapValue.put("visitService",temp.getAsString("VISIT_BAK"));
	            mapValue.put("visitBak",temp.getAsString("VISIT_BAK"));
	            mapValue.put("visitFrom",temp.getAsString("VISIT_FROM"));
	            mapValue.put("userIp",temp.getAsString("user_ip"));
	            mapValue.put("createdTime",temp.getAsString("CREATED_TIME"));
	            listmap.add(mapValue);
	        }
	        return listmap;
	    }
	
	
}


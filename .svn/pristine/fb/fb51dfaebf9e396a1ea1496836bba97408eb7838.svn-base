package com.taikang.tkcoww.imglist.controller;

import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.taikang.tkcoww.banner.action.IBannerAction;
import com.taikang.tkcoww.module.action.IModuleAction;
import com.taikang.tkcoww.moduleContent.action.IModuleContentAction;
import com.taikang.tkcoww.moduleDes.action.IModuleDesAction;
import com.taikang.udp.common.util.CommUtil;
import com.taikang.udp.common.util.ProperHelper;
import com.taikang.udp.framework.common.datastructre.Dto;
import com.taikang.udp.framework.common.datastructre.impl.BaseDto;
import com.taikang.udp.framework.core.persistence.pagination.CurrentPage;
import com.taikang.udp.framework.core.web.BaseController;
import com.taikang.udp.security.service.SecurityUserHolder;
import com.taikang.udp.sys.action.IMenuAction;
import com.taikang.udp.sys.action.IRoleMenuAction;
import com.taikang.udp.sys.action.IUserRoleAction;
import com.taikang.udp.sys.util.CommonUtil;

import net.sf.json.JSONObject;

@Controller("imgListmodule")
@RequestMapping(value="/imgListmodule")
public class ImgListModController extends BaseController {
	@Resource(name=IModuleDesAction.ACTION_ID)
	private IModuleDesAction moduleDesAction;
	@Resource(name=IModuleAction.ACTION_ID)
	private IModuleAction moduleAction;
	@Resource(name = IModuleContentAction.ACTION_ID)
	private IModuleContentAction moduleContentAction;
	@Resource(name = IMenuAction.ACTION_ID)
	private IMenuAction menuAction;
	@Resource(name = IUserRoleAction.ACTION_ID)
	private IUserRoleAction userRoleAction;
	@Resource(name = IRoleMenuAction.ACTION_ID)
	private IRoleMenuAction roleMenuAction;
	@Resource(name = IBannerAction.ACTION_ID)
	private IBannerAction bannerAction;
	
	/**
	 * 查询 带图列表模板 列表  页面
	 * @return 分页列表数据
	 */
	@RequestMapping("/getImgListModuleList")
	@ResponseBody
	public Map<String,Object> getImgListModuleList(HttpServletRequest request,CurrentPage page){
		Dto param = getParamAsDto(request);
		Map<String, Object> map = new HashMap<String, Object>();
		page.setParamObject(param);
		CurrentPage currentPage = moduleDesAction.getImgListModuleList(page);
		
		map.put("rows", currentPage.getPageItems());
		map.put("total", currentPage.getTotalRows());
		
		return map;
	}
	
	/**
	 * 新增带图列表元素.
	 * @return
	 */
	@RequestMapping("/imgListElementAdd")
	public String imgListElementAdd(HttpServletRequest request, Model mode){
		Dto param = getParamAsDto(request);
		mode.addAttribute("parent_modid", param.getAsString("modId"));
		mode.addAttribute("reqMenuId", param.getAsString("reqMenuId"));
		mode.addAttribute("modName",  CommUtil.convert(param.getAsString("modName"),"UTF-8"));
		return "moduleDes/imgListElementAdd";
	}
	
	/**
	 * 编辑带图列表元素.
	 * @return
	 */
	@RequestMapping("/imgListElementEdit")
	public String imgListElementEdit(HttpServletRequest request, Model mode){
		Dto param = getParamAsDto(request);
		param.put("delflag", "0");
		mode.addAttribute("parent_modid", param.getAsString("modId"));
		Dto desParam = new BaseDto();
		desParam.put("mod_id", param.getAsString("modId"));
		desParam.put("delflag", "0");
		Dto des = moduleDesAction.findAll(desParam).get(0);
		Dto mod = moduleAction.findOne(param);
		Dto content = moduleContentAction.findNewOne(param);
		mode.addAttribute("modDesObj", des);
		mode.addAttribute("modObj", mod);
		mode.addAttribute("modContentObj", content);
		mode.addAttribute("modName",  CommUtil.convert(param.getAsString("modName"),"UTF-8"));
		return "moduleDes/imgListElementEdit";
	}
	
	/**
	 * 删除带图列表元素.
	 * @return
	 */
	@RequestMapping("/imgListElementDelete")
	@ResponseBody
	public String imgListElementDelete(HttpServletRequest request, Model mode){
		Dto param = getParamAsDto(request);
		param.put("delflag", "1");
		moduleDesAction.updateObject(param);
		moduleContentAction.updateObject(param);
		moduleAction.updateObject(param);
		Dto result = new BaseDto();
		result.put("code", "0");
		return result.toJson();
	}
	
	/**
	 * 图片列表元素 保存
	 */
	@RequestMapping("/saveImgListElementInfo")
	private ResponseEntity<String> saveImgListElement(HttpServletRequest request, HttpServletResponse response) {
		HttpHeaders  resHeader = new HttpHeaders();
		resHeader.setContentType(MediaType.TEXT_HTML);
		Map<String, String> map = new HashMap<String, String>();
		Dto paramDto = getParamAsDto(request);
		
		//保存图片
		String coverPath = ProperHelper.SMALLIMAGE;
		Dto imgUpload = CommonUtil.generateFile2Server("coverImg", coverPath, request);
		// mod ID
		String modId = UUID.randomUUID().toString().replace("-", "");
		//创建者
		String createBy = SecurityUserHolder.getCurrentUser().getUsername();
		Timestamp time = new Timestamp(System.currentTimeMillis());
		//创建时间
		String createTime = String.valueOf(time);
		// 写mod表
		Dto modParam = new BaseDto();
		modParam.put("createBy", createBy);
		modParam.put("createdTime", createTime);
		modParam.put("delflag", "0");
		modParam.put("modId", modId);
		modParam.put("modName", paramDto.getAsString("title"));
		modParam.put("modIsleaf", "1");
		modParam.put("modUrl", paramDto.getAsString("modUrl"));
		modParam.put("modParentId", paramDto.getAsString("pmodid"));
		modParam.put("modSquence", paramDto.getAsString("weight"));
		moduleAction.insertObject(modParam);

		// 写moddes表
		Dto modDesParam = new BaseDto();
		modDesParam.put("createBy", createBy);
		modDesParam.put("createdTime", createTime);
		modDesParam.put("delflag", "0");
		modDesParam.put("modId", modId);
		modDesParam.put("modName", paramDto.getAsString("title"));
		modDesParam.put("modType", "04");
		modDesParam.put("modByname", paramDto.getAsString("title"));
		modDesParam.put("modSeo", paramDto.getAsString("modSeo"));
		modDesParam.put("keyWord", paramDto.getAsString("key"));
		modDesParam.put("modUrl", paramDto.getAsString("modUrl"));
		modDesParam.put("modDes", paramDto.getAsString("modDes"));
		modDesParam.put("modImg", imgUpload.getAsString("storePath"));
		moduleDesAction.insertObject(modDesParam);
		
		// 写modcontent表
		Dto modContParam = new BaseDto();
		String contentId = UUID.randomUUID().toString().replace("-", "");
		modContParam.put("contentId", contentId);
		modContParam.put("modNumber", "0");
		modContParam.put("hasBanner", "0");
		modContParam.put("content", paramDto.get("editor"));
		modContParam.put("isDisplay", "0");
		modContParam.put("createBy", createBy);
		modContParam.put("createdTime", createTime);
		modContParam.put("delflag", "0");
		modContParam.put("modId", modId);
		moduleContentAction.insertObject(modContParam);
		
		map.put(MESSAGE_INFO, "新增成功！");
		map.put(RTN_RESULT, "true");
		
		map.put("backUp2", paramDto.getAsString("pmodid"));
		map.put("reqMenuId", paramDto.getAsString("reqMenuId"));
		String  json= JSONObject.fromObject(map).toString();
		return new ResponseEntity<String>(json,resHeader,HttpStatus.OK);
	}
	
	/**
	 * 图片列表模板 保存
	 */
	@RequestMapping("/saveImgListModuleInfo")
	@ResponseBody
	private ResponseEntity<String> saveImgListModule(HttpServletRequest request, HttpServletResponse response) {
		HttpHeaders resHeader = new HttpHeaders();
		resHeader.setContentType(MediaType.TEXT_HTML);
		Map<String, String> map = new HashMap<String, String>();
		Dto paramDto = getParamAsDto(request);
		// 保存图片.
		String coverPath = ProperHelper.SMALLIMAGE;
		Dto imgUpload = CommonUtil.generateFile2Server("coverImg", coverPath,
				request);
		String bannerPath = ProperHelper.BANNERFODLER;
		Dto banUpload = CommonUtil.generateFile2Server("banImgUrl", bannerPath,
				request);
		// mod ID
		String modId = UUID.randomUUID().toString().replace("-", "");

		// 创建者
		String createBy = SecurityUserHolder.getCurrentUser().getUsername();
		Timestamp time = new Timestamp(System.currentTimeMillis());
		// 创建时间
		String createTime = String.valueOf(time);

		// banner ID
		String bannerId = UUID.randomUUID().toString().replace("-", "");
		// 写banner表
		if ("0".equals(banUpload.getAsString("code"))) {
			Dto banParam = new BaseDto();
			banParam.put("createBy", createBy);
			banParam.put("createdTime", createTime);
			banParam.put("banImgId", bannerId);
			banParam.put("banId", bannerId);
			banParam.put("belongId", modId);
			banParam.put("banImgName", banUpload.getAsString("originName"));
			banParam.put("banImgUrl", banUpload.getAsString("storePath"));
			String imgId = UUID.randomUUID().toString().replace("-", "");
			banParam.put("banImgId", imgId);
			banParam.put("banImgNum", 1);
			banParam.put("banImgRename", banUpload.getAsString("trueName"));
			banParam.put("delflag", "0");
			bannerAction.insertObject(banParam);
		}

		// 写mod表
		Dto modParam = new BaseDto();
		modParam.put("createBy", createBy);
		modParam.put("createdTime", createTime);
		modParam.put("delflag", "0");
		modParam.put("modId", modId);
		modParam.put("modName", paramDto.getAsString("title"));
		modParam.put("modIsleaf", "1");
		modParam.put("modUrl", paramDto.getAsString("modUrl"));
		modParam.put("modSquence", paramDto.getAsString("weight"));
		int modLevel = Integer.parseInt(paramDto.getAsString("modLevel")) + 1;
		modParam.put("modLevel", modLevel);
		modParam.put("modParentId", paramDto.getAsString("modParentId"));
		moduleAction.insertObject(modParam);

		// 写moddes表
		Dto modDesParam = new BaseDto();
		modDesParam.put("createBy", createBy);
		modDesParam.put("createdTime", createTime);
		modDesParam.put("delflag", "0");
		modDesParam.put("modId", modId);
		modDesParam.put("modName", paramDto.getAsString("title"));
		modDesParam.put("modType", "04");
		modDesParam.put("modByname", paramDto.getAsString("title"));
		modDesParam.put("modSeo", paramDto.getAsString("modSeo"));
		modDesParam.put("keyWord", paramDto.getAsString("key"));
		modDesParam.put("modUrl", paramDto.getAsString("modUrl"));
		modDesParam.put("modDes", paramDto.getAsString("modDes"));
		if ("0".equals(banUpload.getAsString("code"))) {
			modDesParam.put("modBanner", bannerId);
		}
		modDesParam.put("modImg", imgUpload.getAsString("storePath"));
		moduleDesAction.insertObject(modDesParam);

		// 写modcontent表
		Dto modContParam = new BaseDto();
		String contentId = UUID.randomUUID().toString().replace("-", "");
		modContParam.put("contentId", contentId);
		modContParam.put("modNumber", "0");
		modContParam.put("hasBanner", "0");
		modContParam.put("content", paramDto.get("editor"));
		modContParam.put("isDisplay", "0");
		modContParam.put("createBy", createBy);
		modContParam.put("createdTime", createTime);
		modContParam.put("delflag", "0");
		modContParam.put("modId", modId);
		moduleContentAction.insertObject(modContParam);

		// 写menu表
		Dto menuParam = new BaseDto();
		String menuId = CommUtil.randomInt(5);
		menuParam.put("menuId", menuId);
		String parentId = paramDto.getAsString("parentId") + "|"
				+ paramDto.getAsString("menuId");
		menuParam.put("parentId", parentId);
		String url = "/moduleDes/showImgModList";
		menuParam.put("menuUrl", url);
		menuParam.put("isLeaf", "1");
		menuParam.put("menuName", paramDto.getAsString("title"));
		menuParam.put("menuOrder", 999);
		menuParam.put("menuStatus", 1);
		menuParam.put("Backup2", modId);
		menuParam.put("creator", SecurityUserHolder.getCurrentUser().getId());
		menuParam.put("createdTime", createTime);
		menuParam.put("isShow", 1);
		menuAction.insertObject(menuParam);

		Dto roleUserDto = new BaseDto();
		roleUserDto.put("userId", SecurityUserHolder.getCurrentUser().getId());
		roleUserDto.put("delflag", "0");
		Dto roleUseOne = userRoleAction.findOne(roleUserDto);
		Dto roleMenuDto = new BaseDto();
		roleMenuDto.put("roleId", roleUseOne.getAsString("roleId"));
		roleMenuDto.put("menuId", menuId);
		roleMenuDto.put("creator", SecurityUserHolder.getCurrentUser().getId());
		roleMenuDto.put("createdTime", createTime);
		roleMenuAction.insertObject(roleMenuDto);

		map.put(MESSAGE_INFO, "新增成功！");
		map.put(RTN_RESULT, "true");

		map.put("reqMenuId", paramDto.getAsString("menuId"));
		map.put("menuName", paramDto.getAsString("modParentName"));
		map.put("backUp2", paramDto.getAsString("modParentId"));
		String json = JSONObject.fromObject(map).toString();
		return new ResponseEntity<String>(json, resHeader, HttpStatus.OK);
	}
	
	/**
	 * 跳转到带图列表页面
	 */
	@RequestMapping("/showImgModList")
	private String showImgModList(HttpServletRequest request, Model model) {
		Dto paramAsDto = getParamAsDto(request);
		paramAsDto.put("modId", paramAsDto.getAsString("backUp2"));
		paramAsDto.put("delflag","0");
		Dto findOne = moduleAction.findOne(paramAsDto);
		model.addAttribute("modId", paramAsDto.getAsString("backUp2"));
		model.addAttribute("menuId", paramAsDto.getAsString("reqMenuId"));
		model.addAttribute("parentId", paramAsDto.getAsString("parentId"));
		model.addAttribute("isLeaf",  paramAsDto.getAsString("isLeaf"));
		model.addAttribute("status", paramAsDto.getAsString("status"));
		model.addAttribute("menuName", paramAsDto.getAsString("menuName"));
		model.addAttribute("modIsleaf", findOne.getAsString("modIsleaf"));
		model.addAttribute("modName", findOne.getAsString("modName"));
		model.addAttribute("modLevel", findOne.getAsString("modLevel"));
		model.addAttribute("modParentId", findOne.getAsString("modParentId"));
		model.addAttribute("reqMenuId", paramAsDto.getAsString("reqMenuId"));
		return "moduleDes/imgListModuleIndex";
	}
	
	/**
	 * 编辑图片列表模块.
	 */
	@RequestMapping("/editImgModList")
	private String editImgModList (HttpServletRequest request, Model model) {
		return "moduleDes/imgListModuleEdit";
	}
	
	/**
	 * 取得模块信息.
	 */
	@RequestMapping("/getModInfo")
	@ResponseBody
	private String getEditImgModListInfo (HttpServletRequest request, Model model) {
		Dto param = getParamAsDto(request);
		param.put("delflag", "0");
		String modId = param.getAsString("modId");
		
		Dto mod = moduleAction.findOne(param);
		
		Dto modDes = moduleDesAction.findOneModDes(param);
		
		Dto modContent = moduleContentAction.findNewOne(param);
		
		Dto ban = new BaseDto();
		ban.put("banId", modDes.getAsString("modBanner"));
		ban.put("belongId", modDes.getAsString("modId"));
		Dto banner = bannerAction.findOne(ban);
		
		Dto result = new BaseDto();
		result.put("code", "0");
		result.put("mod", mod.toJson());
		result.put("modDes", modDes.toJson());
		result.put("modContent", modContent.toJson());
		result.put("banner", banner.toJson());
		return result.toJson();
	}
	
	/**
	 * 图片列表模板 保存
	 */
	@RequestMapping("/updataModuleInfo")
	@ResponseBody
	private ResponseEntity<String> updataImgListModule(HttpServletRequest request, HttpServletResponse response) {
		HttpHeaders  resHeader = new HttpHeaders();
		resHeader.setContentType(MediaType.TEXT_HTML);
		Map<String, String> map = new HashMap<String, String>();
		Dto paramDto = getParamAsDto(request);
		// 保存图片.
		String coverPath = ProperHelper.SMALLIMAGE;
		Dto imgUpload = CommonUtil.generateFile2Server("coverImg", coverPath, request);
		String bannerPath = ProperHelper.BANNERFODLER;
		Dto banUpload = CommonUtil.generateFile2Server("banImgUrl", bannerPath, request);
		// mod ID
		String modId = paramDto.getAsString("modId");
		
		//创建者
		String createBy = SecurityUserHolder.getCurrentUser().getUsername();
		Timestamp time = new Timestamp(System.currentTimeMillis());
		//创建时间
		String createTime = String.valueOf(time);
		
		// banner ID
		String bannerId = paramDto.getAsString("bannerId");
		// 写banner表
		if ("0".equals(banUpload.getAsString("code"))) {
			if (bannerId == null || "".equals(bannerId)) {
				bannerId = UUID.randomUUID().toString().replace("-", "");
				Dto banParam = new BaseDto();
				banParam.put("createBy", createBy);
				banParam.put("createdTime", createTime);
				banParam.put("banImgId", bannerId);
				banParam.put("banId", bannerId);
				banParam.put("belongId", modId);
				banParam.put("banImgName", banUpload.getAsString("originName"));
				banParam.put("banImgUrl", banUpload.getAsString("storePath"));
				String imgId = UUID.randomUUID().toString().replace("-", "");
				banParam.put("banImgId", imgId);
				banParam.put("banImgNum", 1);
				banParam.put("banImgRename", banUpload.getAsString("trueName"));
				banParam.put("delflag", "0");
				bannerAction.insertObject(banParam);
			} else {
				Dto banParam = new BaseDto();
				banParam.put("modifiedyBy", createBy);
				banParam.put("modifiedTime", createTime);
				banParam.put("banId", bannerId);
				banParam.put("banImgName", banUpload.getAsString("originName"));
				banParam.put("banImgUrl", banUpload.getAsString("storePath"));
				String imgId = UUID.randomUUID().toString().replace("-", "");
				banParam.put("banImgId", imgId);
				banParam.put("banImgNum", 1);
				banParam.put("banImgRename", banUpload.getAsString("trueName"));
				bannerAction.updateObject(banParam);
			}
		}
		
		// 写mod表
		Dto modParam = new BaseDto();
		modParam.put("modifiedyBy", createBy);
		modParam.put("modifiedTime", createTime);
		modParam.put("modId", modId);
		modParam.put("modSquence", paramDto.getAsString("weight"));
		modParam.put("modName", paramDto.getAsString("title"));
		modParam.put("modUrl", paramDto.getAsString("modUrl"));
		moduleAction.updateObject(modParam);
		
		// 写moddes表
		Dto modDesParam = new BaseDto();
		modDesParam.put("modifiedyBy", createBy);
		modDesParam.put("modifiedTime", createTime);
		modDesParam.put("modId", modId);
		modDesParam.put("modName", paramDto.getAsString("title"));
		modDesParam.put("modByname", paramDto.getAsString("title"));
		modDesParam.put("title", paramDto.getAsString("title"));
		modDesParam.put("modSeo", paramDto.getAsString("modSeo"));
		modDesParam.put("keyWord", paramDto.getAsString("key"));
		modDesParam.put("modUrl", paramDto.getAsString("modUrl"));
		modDesParam.put("modDes", paramDto.getAsString("modDes"));
		if ("0".equals(banUpload.getAsString("code"))) {
			modDesParam.put("modBanner", bannerId);
		}
		if ("0".equals(imgUpload.getAsString("code"))) {
			modDesParam.put("modImg", imgUpload.getAsString("storePath"));
		}
		moduleDesAction.updateObject(modDesParam);
		
		// 写modcontent表
		Dto modContParam = new BaseDto();
		modContParam.put("content", paramDto.get("editor"));
		modContParam.put("modId", modId);
		moduleContentAction.updateObject(modContParam);
		
		// 写menu表
		Dto menuParam = new BaseDto();
		menuParam.put("menuId", paramDto.getAsString("menuId"));
		menuParam.put("menuName", paramDto.getAsString("title"));
		menuAction.updateObject(menuParam);
		
		map.put(MESSAGE_INFO, "更新成功！");
		map.put(RTN_RESULT, "true");
		
		map.put("reqMenuId", paramDto.getAsString("menuId"));
		map.put("menuName", paramDto.getAsString("modParentName"));
		map.put("backUp2", paramDto.getAsString("modParentId"));
		String  json= JSONObject.fromObject(map).toString();
		return new ResponseEntity<String>(json,resHeader,HttpStatus.OK);
	}
	
	@RequestMapping("/upload")
	public void editorUpload(HttpServletRequest request,
			HttpServletResponse response) {
		String path = ProperHelper.EDITIMG;
		Dto imgUpload = CommonUtil.generateFile2Server("upload", path, request);
		String code = imgUpload.getAsString("code");
		String storePath = imgUpload.getAsString("storePath");
		
		response.setContentType("text/html; charset=UTF-8");
        response.setHeader("Cache-Control", "no-cache");
        
        String callback = request.getParameter("CKEditorFuncNum");
        try {
			PrintWriter out = response.getWriter();
			out.println("<script type=\"text/javascript\">");
            out.println("window.parent.CKEDITOR.tools.callFunction("
                    + callback + ",'" + storePath + "',''" + ")");
            out.println("</script>");
            
            out.flush();
  	      out.close();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
	}
	
	/**
	 * 图片列表模板 保存
	 */
	@RequestMapping("/updataImgListElementInfo")
	private ResponseEntity<String> updataImgListElementInfo(HttpServletRequest request, HttpServletResponse response) {
		HttpHeaders  resHeader = new HttpHeaders();
		resHeader.setContentType(MediaType.TEXT_HTML);
		Map<String, String> map = new HashMap<String, String>();
		Dto paramDto = getParamAsDto(request);
		
		//保存图片
		String coverPath = ProperHelper.SMALLIMAGE;
		Dto imgUpload = CommonUtil.generateFile2Server("coverImg", coverPath, request);
		// mod ID
		String modId = paramDto.getAsString("modId");
		//创建者
		String createBy = SecurityUserHolder.getCurrentUser().getUsername();
		Timestamp time = new Timestamp(System.currentTimeMillis());
		//创建时间
		String createTime = String.valueOf(time);
		// 写mod表
		Dto modParam = new BaseDto();
		modParam.put("modifiedBy", createBy);
		modParam.put("modifiedTime", createTime);
		modParam.put("modId", modId);
		modParam.put("modName", paramDto.getAsString("title"));
		modParam.put("modUrl", paramDto.getAsString("modUrl"));
		modParam.put("modParentId", paramDto.getAsString("pmodid"));
		modParam.put("modSquence", paramDto.getAsString("weight"));
		moduleAction.updateObject(modParam);

		// 写moddes表
		Dto modDesParam = new BaseDto();
		modDesParam.put("modifiedBy", createBy);
		modDesParam.put("modifiedTime", createTime);
		modDesParam.put("modId", modId);
		modDesParam.put("modName", paramDto.getAsString("title"));
		modDesParam.put("modByname", paramDto.getAsString("title"));
		modDesParam.put("modSeo", paramDto.getAsString("modSeo"));
		modDesParam.put("keyWord", paramDto.getAsString("key"));
		modDesParam.put("modUrl", paramDto.getAsString("modUrl"));
		modDesParam.put("modDes", paramDto.getAsString("modDes"));
		if ("0".equals(imgUpload.getAsString("code"))) {
			modDesParam.put("modImg", imgUpload.getAsString("storePath"));
		}
		moduleDesAction.updateObject(modDesParam);
		
		// 写modcontent表
		Dto modContParam = new BaseDto();
		String contentId = UUID.randomUUID().toString().replace("-", "");
		modContParam.put("contentId", contentId);
		modContParam.put("content", paramDto.get("editor"));
		modContParam.put("modifiedBy", createBy);
		modContParam.put("modifiedTime", createTime);
		modContParam.put("modId", modId);
		moduleContentAction.updateObject(modContParam);
		
		map.put(MESSAGE_INFO, "更新成功！");
		map.put(RTN_RESULT, "true");
		
		map.put("backUp2", paramDto.getAsString("pmodid"));
		map.put("reqMenuId", paramDto.getAsString("reqMenuId"));
		String  json= JSONObject.fromObject(map).toString();
		return new ResponseEntity<String>(json,resHeader,HttpStatus.OK);
	}
}

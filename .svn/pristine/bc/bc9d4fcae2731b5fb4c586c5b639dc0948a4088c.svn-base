/**
 * 
 */
package com.taikang.tkcoww.module.controller;

import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.sql.Timestamp;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;

import net.sf.json.JSONObject;

import org.apache.commons.io.FileUtils;
import org.apache.commons.io.FilenameUtils;
import org.apache.commons.lang3.StringUtils;
import org.springframework.http.HttpHeaders;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.multipart.MultipartHttpServletRequest;

import com.taikang.tkcoww.banner.action.IBannerAction;
import com.taikang.tkcoww.module.action.IModuleAction;
import com.taikang.tkcoww.moduleContent.action.IModuleContentAction;
import com.taikang.tkcoww.moduleDes.action.IModuleDesAction;
import com.taikang.tkcoww.moduleImg.action.IModuleImgAction;
import com.taikang.udp.common.constant.Globals;
import com.taikang.udp.common.constant.UploadVertor;
import com.taikang.udp.common.util.CommUtil;
import com.taikang.udp.common.util.FileHelper;
import com.taikang.udp.common.util.ProperHelper;
import com.taikang.udp.common.util.WebUtil;
import com.taikang.udp.framework.common.datastructre.Dto;
import com.taikang.udp.framework.common.datastructre.impl.BaseDto;
import com.taikang.udp.framework.common.util.TKStringUtils;
import com.taikang.udp.framework.core.web.BaseController;
import com.taikang.udp.security.service.SecurityUserHolder;
import com.taikang.udp.sys.action.IMenuAction;
import com.taikang.udp.sys.action.IRoleMenuAction;
import com.taikang.udp.sys.action.IUserRoleAction;
import com.taikang.udp.sys.util.CommonUtil;

/**
 * TODO ColumnIntroController.java
 * 
 * @author itw_lixy02
 * @date 2016年2月2日下午12:52:39
 */
@Controller("columnController")
@RequestMapping(value = "/column")
public class ColumnController extends BaseController {
	@Resource(name = IUserRoleAction.ACTION_ID)
	private IUserRoleAction userRoleAction;
	
	@Resource(name = IModuleAction.ACTION_ID)
	private IModuleAction moduleAction;

	@Resource(name = IModuleDesAction.ACTION_ID)
	private IModuleDesAction moduleDesAction;

	@Resource(name = IBannerAction.ACTION_ID)
	private IBannerAction bannerAction;

	@Resource(name = IModuleImgAction.ACTION_ID)
	private IModuleImgAction moduleImgAction;

	@Resource(name = IMenuAction.ACTION_ID)
	private IMenuAction menuAction;
	
	@Resource(name = IRoleMenuAction.ACTION_ID)
	private IRoleMenuAction roleMenuAction;
	/**
	 * 新增栏目介绍
	 * 
	 * @return
	 */
	@RequestMapping("addColIntroduce")
	public String addColIntroduceColPage(HttpServletRequest request, Model model) {
		Dto paramAsDto = CommonUtil.getParamAsDto(request);
		String modId = paramAsDto.getAsString("modId");
		if (modId != null && !modId.equals("")) {
			String mName = CommUtil.convert(paramAsDto.getAsString("modName"),
					"UTF-8");
			model.addAttribute("modParentName", mName);
			model.addAttribute("modParentId", paramAsDto.getAsString("modId"));
			model.addAttribute("menuType", paramAsDto.getAsString("menuType"));
			model.addAttribute("modIsleaf", paramAsDto.getAsString("modIsleaf"));
			model.addAttribute("modLevel", paramAsDto.getAsString("modLevel"));
			model.addAttribute("menuId", paramAsDto.getAsString("menuId"));
			model.addAttribute("parentId", paramAsDto.getAsString("parentId"));
			
		}
		return "module/moduleColIntrAdd";
	}

	/**
	 * 保存栏目介绍
	 */
	@RequestMapping("addFormCol")
	@ResponseBody
	public ResponseEntity<String> addFormSub(HttpServletRequest request,
			Model model) {
		// 定义响应参数的格式防止弹出下载框
		HttpHeaders resHeader = new HttpHeaders();
		resHeader.setContentType(MediaType.TEXT_HTML);
		MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
		Map<String, String> map = new HashMap<String, String>();
		Dto paramAsDto = CommonUtil.getParamAsDto(request);
		// String menId = paramAsDto.getAsString("editor");
		//
		String banerpath = (String) (ProperHelper.BANNERFODLER != null ? ProperHelper.BANNERFODLER
				: FileHelper.buildFolder(request));// 获取tomcat目录
		CommUtil.createFolder(banerpath);

		String smalPath = (String) (ProperHelper.SMALLIMAGE != null ? ProperHelper.SMALLIMAGE
				: FileHelper.buildFolder(request));// 获取tomcat目录
		CommUtil.createFolder(smalPath);

		String[] extendes = (Globals.DEFAULT_IMAGE_SUFFIX).split("[|]");

		String bannerFilename = null;
		String saveBannerName = null;
		Map<String, Object> mapban = null;
		String realBannerPath = null;
		MultipartFile fmodBanner = multiRequest.getFile("modBanner");
		String bannerUrl = null;
		if (!fmodBanner.isEmpty()) {
			// 保存banner到服务器
			try {
				bannerFilename = fmodBanner.getOriginalFilename();
				// String getFileName2 =
				// FileHelper.getFileName(multiRequest.getFile("modBanner").getName());
				logger.info("开始上传文件:" + bannerFilename);

				saveBannerName = CommonUtil.generateFileName(FilenameUtils
						.getExtension(bannerFilename));
				mapban = WebUtil.saveFileToServer(multiRequest, "modBanner",
						banerpath, saveBannerName, extendes);
				realBannerPath = request.getSession().getServletContext()
						.getRealPath(banerpath);
				FileUtils.copyInputStreamToFile(fmodBanner.getInputStream(),
						new File(realBannerPath, saveBannerName));
				// 获得http服务器路径
				/*bannerUrl = WebUtil.getURL(request) + ""
						+ UploadVertor.FILE_UPLOAD_BANNER + "/"
						+ saveBannerName;*/
				bannerUrl =banerpath.replaceAll("\\\\", "/")+ "/"
						+ saveBannerName;
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
		MultipartFile fmodImg = multiRequest.getFile("modImg");
		String imgFilename = null;
		Map<String, Object> mapimg = null;
		String saveImgName = null;
		String realSmalImgPath = null;
		String imgUrl = null;
		if (!fmodImg.isEmpty()) {
			imgFilename = fmodImg.getOriginalFilename();
			// 保存小图片到服务器
			saveImgName = CommonUtil.generateFileName(FilenameUtils
					.getExtension(imgFilename));

			try {
				logger.info("开始上传文件:" + imgFilename);
				mapimg = WebUtil.saveFileToServer(multiRequest, "modImg",
						smalPath, saveImgName, extendes);
				realSmalImgPath = request.getSession().getServletContext()
						.getRealPath(smalPath);
				FileUtils.copyInputStreamToFile(fmodImg.getInputStream(),
						new File(realSmalImgPath, saveImgName));
				/*imgUrl = WebUtil.getURL(request) + ""
						+ UploadVertor.FILE_UPLOAD_SMALIMAGE + "/"
						+ saveImgName;*/
				imgUrl =smalPath.replaceAll("\\\\", "/")+ "/"
						+ saveImgName;
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		map.put(RTN_RESULT, "true");
		String modId = null;
		if ((mapban != null && !mapban.isEmpty())
				&& !((List) mapban.get("error")).isEmpty()
				&& ((List) mapban.get("error")) != null) {
			map.put(MESSAGE_INFO, "新增失败！" + mapban.get("error"));
			String json = JSONObject.fromObject(map).toString();
			return new ResponseEntity<String>(json, resHeader, HttpStatus.OK);
		} else if ((mapimg != null && !mapimg.isEmpty())
				&& !((List) mapimg.get("error")).isEmpty()
				&& ((List) mapimg.get("error")) != null) {
			map.put(MESSAGE_INFO, "新增失败！" + mapimg.get("error"));
			String json = JSONObject.fromObject(map).toString();
			return new ResponseEntity<String>(json, resHeader, HttpStatus.OK);
		} else {
			// paramAsDto
			modId = UUID.randomUUID().toString().replace("-", "");
			paramAsDto.put("modId", modId);
			int modLevel = Integer.parseInt(paramAsDto.getAsString("modLevel")) + 1;
			paramAsDto.put("modLevel", modLevel);
			int modIsleaf = Integer.parseInt(paramAsDto
					.getAsString("modIsleaf"));
			// 创建时间
			Timestamp timestamp = new Timestamp(System.currentTimeMillis());
			paramAsDto.put("createdTime", timestamp);
			if (modLevel == 4) {
				paramAsDto.put("modIsleaf", "1");// "1"表示叶子节点
			} else {
				paramAsDto.put("modIsleaf", "0");
			}
			try {
				// 事实上，paramDto已有数据
				paramAsDto.put(
						"createdBy",
						SecurityUserHolder.getCurrentUser() == null ? null
								: String.valueOf(SecurityUserHolder
										.getCurrentUser().getUsername()));
			} catch (Exception e) {
				map.put(MESSAGE_INFO, "新增失败！" + mapimg.get("error"));
				String json = JSONObject.fromObject(map).toString();
				return new ResponseEntity<String>(json, resHeader, HttpStatus.OK);
			}
			paramAsDto.put("version", "1");
			paramAsDto.put("delflag", "0");
			//保证url唯一
			String modUrl=paramAsDto.getAsString("modUrl");
			Dto nullDto=new BaseDto();
//			nullDto.put("modUrl", modUrl);
			nullDto.put("", "");
			nullDto.put("mod_url", modUrl);
			nullDto.put("delflag", "0");
			if (!TKStringUtils.isEmpty(modUrl)) {
				List<Dto> lstDto = moduleAction.findAll(nullDto);
				if (lstDto.size() > 0) {
					for (Dto onedto : lstDto) {
						if (!onedto.getAsString("MOD_ID").equalsIgnoreCase(
								modId)) {
							map.put(MESSAGE_INFO, "新增失败！与"+onedto.getAsString("MOD_NAME")+"链接名称重复！");
							map.put(RTN_RESULT, "false");
							String json = JSONObject.fromObject(map).toString();
							return new ResponseEntity<String>(json, resHeader,
									HttpStatus.OK);
						}
						;
					}
				}
			}
			// 保存先保存到到主表
			moduleAction.insertObject(paramAsDto);
			// 保存到menu
			Dto menuDto = new BaseDto();
			Dto findOne = null;
			int menuId = 0;
			do {
				menuId = Integer.parseInt(CommUtil.randomInt(5));
				menuDto.put("menuId", menuId);
				findOne = menuAction.findOne(menuDto);

			} while (!findOne.isEmpty());
			menuDto.put("parentId", paramAsDto.getAsString("parentId") + "|"
					+ paramAsDto.getAsString("menuId"));
			menuDto.put("isLeaf", paramAsDto.getAsString("modIsleaf"));
			menuDto.put("menuName", paramAsDto.getAsString("modName"));
			if (modLevel == 4) {
				paramAsDto.put("menuUrl", "");// "1"表示叶子节点
			} else {
				menuDto.put("menuUrl", "/module/subList");
			}
			menuDto.put("menuOrder", 999);
			menuDto.put("menuStatus", 1);
			menuDto.put("Backup2", modId);
			String loginId = SecurityUserHolder.getCurrentUser() == null ? null
					: String.valueOf(SecurityUserHolder.getCurrentUser()
							.getId());
			paramAsDto.put("creator", loginId);
			menuDto.put("createTime", timestamp);
			menuDto.put("isShow", 1);
			menuAction.insertObject(menuDto);

			// 更新到权限表Dto
			Dto roleUserDto = new BaseDto();
			roleUserDto.put("userId", loginId);
			Dto roleUseOne = userRoleAction.findOne(roleUserDto);
			Dto roleMenuDto = new BaseDto();
			roleMenuDto.put("roleId", roleUseOne.getAsString("roleId"));
			roleMenuDto.put("menuId", menuId);
			roleMenuDto.put("creator", loginId);
			roleMenuDto.put("createTime", timestamp);
			roleMenuAction.insertObject(roleMenuDto);
			
			String banImgId=null;
			if (!fmodBanner.isEmpty()) {
				banImgId = UUID.randomUUID().toString().replace("-", "");
				paramAsDto.put("modBanner", banImgId);	
			}
			paramAsDto.put("modType", "02");
			String modImgId=null;
			if(!fmodImg.isEmpty()){
				 modImgId = UUID.randomUUID().toString().replace("-", "");
				paramAsDto.put("modImg", modImgId);
			}
			//跟新到Des表
			paramAsDto.put("title", paramAsDto.getAsString("modName"));
			paramAsDto.put("modBanner", bannerUrl);
			paramAsDto.put("modImg", imgUrl);
			moduleDesAction.insertObject(paramAsDto);
			
	

			// 更新到banner表中
			if (!fmodBanner.isEmpty()) {
				paramAsDto.put("banId", banImgId);
				// String banId = UUID.randomUUID().toString().replace("-", "");
				paramAsDto.put("banImgId", banImgId);// 主键
				paramAsDto.put("banImgName", bannerFilename);
				paramAsDto.put("belongId", modId);
				paramAsDto.put("banImgUrl", bannerUrl);

				paramAsDto.put("banImgDes", "下级banner图");
				paramAsDto.put("banImgOutside", "");
				paramAsDto.put("banImgNum", "999");
				paramAsDto.put("banImgRename", saveBannerName);
				bannerAction.insertObject(paramAsDto);
			}

			if (!fmodImg.isEmpty()) {
				// 小图
				paramAsDto.put("modImgId", modImgId);
				paramAsDto.put("modImgName", imgFilename);
				// paramAsDto.put("belongId", modId);
				paramAsDto.put("modImgUrl", imgUrl);
				paramAsDto.put("modImgNum", "999");
				paramAsDto.put("modImgRename", saveImgName);
				paramAsDto.put("modImgDes", "下级小图片");
				paramAsDto.put("modImgOutside", "");
				moduleImgAction.insertObject(paramAsDto);
			}
			// 跳转到
			map.put(MESSAGE_INFO, "新增成功！");
			map.put(RTN_RESULT, "true");

			map.put("reqMenuId", paramAsDto.getAsString("menuId"));
			String mName=null;
			try {
				 mName =java.net.URLDecoder.decode(paramAsDto.getAsString("modParentName").replaceAll("\\\\", ""),"utf-8");
			} catch (UnsupportedEncodingException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} 
			map.put("menuName", mName);
			map.put("backUp2", paramAsDto.getAsString("modParentId"));
			// model.addAttribute(MESSAGE_INFO, "新增成功！");
			// model.addAttribute(RTN_RESULT, true);
		}
		logger.info("结束文件上传:" + bannerFilename + "|" + imgFilename);
		String json = JSONObject.fromObject(map).toString();
		return new ResponseEntity<String>(json, resHeader, HttpStatus.OK);
	}

	/**
	 * 修改下级栏目
	 * 
	 * @return
	 */
	@SuppressWarnings("unchecked")
	@RequestMapping("editFormCol")
	@ResponseBody
	public ResponseEntity<String> editFormSub(HttpServletRequest request,
			Model model) {
		// 定义响应参数的格式防止弹出下载框
				HttpHeaders resHeader = new HttpHeaders();
				resHeader.setContentType(MediaType.TEXT_HTML);
				MultipartHttpServletRequest multiRequest = (MultipartHttpServletRequest) request;
				Map<String, String> map = new HashMap<String, String>();
				Dto paramAsDto = CommonUtil.getParamAsDto(request);
				String banerpath = (String) (ProperHelper.BANNERFODLER != null ? ProperHelper.BANNERFODLER
						: FileHelper.buildFolder(request));// 获取tomcat目录
				CommUtil.createFolder(banerpath);

				String smalPath = (String) (ProperHelper.SMALLIMAGE != null ? ProperHelper.SMALLIMAGE
						: FileHelper.buildFolder(request));// 获取tomcat目录
				CommUtil.createFolder(smalPath);

				String[] extendes = (Globals.DEFAULT_IMAGE_SUFFIX).split("[|]");

				String bannerFilename = null;
				String saveBannerName = null;
				Map<String, Object> mapban = new BaseDto();
				String realBannerPath = null;
				MultipartFile fmodBanner = multiRequest.getFile("modNewBanner");
				String bannerUrl = null;
				if (!fmodBanner.isEmpty() && fmodBanner.getSize() > 0) {
					// 保存banner到服务器
					try {

						bannerFilename = fmodBanner.getOriginalFilename();
						// String getFileName2 =
						// FileHelper.getFileName(multiRequest.getFile("modBanner").getName());
						logger.info("开始上传文件:" + bannerFilename);

						saveBannerName = CommonUtil.generateFileName(FilenameUtils
								.getExtension(bannerFilename));
						mapban = WebUtil.saveFileToServer(multiRequest, "modNewBanner",
								banerpath, saveBannerName, extendes);
						realBannerPath = request.getSession().getServletContext()
								.getRealPath(banerpath);
						FileUtils.copyInputStreamToFile(fmodBanner.getInputStream(),
								new File(realBannerPath, saveBannerName));
						// 获得http服务器路径
						/*bannerUrl = WebUtil.getURL(request) + ""
								+ UploadVertor.FILE_UPLOAD_BANNER + "/"
								+ saveBannerName;
*/						
						bannerUrl =banerpath.replaceAll("\\\\", "/")+ "/"
								+ saveBannerName;
						
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}

				MultipartFile fmodImg = multiRequest.getFile("modNewImg");
				String imgFilename = null;
				Map<String, Object> mapimg = null;
				String saveImgName = null;
				String realSmalImgPath = null;
				String imgUrl = null;
				if (!fmodImg.isEmpty() && fmodImg.getSize() > 0) {

					imgFilename = fmodImg.getOriginalFilename();
					// 保存小图片到服务器
					saveImgName = CommonUtil.generateFileName(FilenameUtils
							.getExtension(imgFilename));

					try {
						logger.info("开始上传文件:" + imgFilename);
						mapimg = WebUtil.saveFileToServer(multiRequest, "modNewImg",
								smalPath, saveImgName, extendes);
						realSmalImgPath = request.getSession().getServletContext()
								.getRealPath(smalPath);
						FileUtils.copyInputStreamToFile(fmodImg.getInputStream(),
								new File(realSmalImgPath, saveImgName));
						/*imgUrl = WebUtil.getURL(request) + ""
								+ UploadVertor.FILE_UPLOAD_SMALIMAGE + "/"
								+ saveImgName;*/
						imgUrl =smalPath.replaceAll("\\\\", "/")+ "/"
								+ saveImgName;
					} catch (IOException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}
				}

				map.put(RTN_RESULT, "true");
				String modId = paramAsDto.getAsString("modId");
				if ((mapban != null && !mapban.isEmpty())
						&& ((List) mapban.get("error")) != null
						&& ((List) mapban.get("error")).size() > 0) {
					map.put(MESSAGE_INFO, "修改失败！" + mapban.get("error"));
					String json = JSONObject.fromObject(map).toString();
					return new ResponseEntity<String>(json, resHeader, HttpStatus.OK);
				} else if ((mapimg != null && !mapimg.isEmpty())
						&& ((List) mapimg.get("error")) != null
						&& !((List) mapimg.get("error")).isEmpty()) {
					map.put(MESSAGE_INFO, "修改失败！" + mapimg.get("error"));
					String json = JSONObject.fromObject(map).toString();
					return new ResponseEntity<String>(json, resHeader, HttpStatus.OK);
				} else {
					paramAsDto.put("modId", modId);
					// 事实上，paramDto已有数据
					Timestamp timestamp = new Timestamp(System.currentTimeMillis());
					paramAsDto.put("modifiedTime", timestamp);
					try {
						paramAsDto
								.put("modifiedBy",
										SecurityUserHolder.getCurrentUser() == null ? null
												: String.valueOf(SecurityUserHolder
														.getCurrentUser()
														.getUsername()));
					} catch (Exception e) {
						// TODO: handle exception
						map.put(MESSAGE_INFO, "修改失败！" + mapimg.get("error"));
						String json = JSONObject.fromObject(map).toString();
						return new ResponseEntity<String>(json, resHeader, HttpStatus.OK);
					}
					paramAsDto
							.put("version",
									paramAsDto.getAsString("version") != null
											&& !"".equals(paramAsDto
													.getAsString("version")) ? Integer
											.parseInt(paramAsDto.getAsString("version")) + 1
											: "");
					// 最后修改主表
					//保证url唯一
					String modUrl=paramAsDto.getAsString("modUrl");
					Dto nullDto=new BaseDto();
//					nullDto.put("modUrl", modUrl);
					nullDto.put("delflag", "0");
					nullDto.put("mod_url", modUrl);
					if (!TKStringUtils.isEmpty(modUrl)) {
						List<Dto> lstDto = moduleAction.findAll(nullDto);
						if (lstDto.size() > 0) {
							for (Dto onedto : lstDto) {
								if (onedto.getAsString("MOD_URL").equalsIgnoreCase(
										modUrl) && !modId.equals(onedto.getAsString("MOD_ID"))) {
									map.put(MESSAGE_INFO, "修改失败！与"+onedto.getAsString("MOD_NAME")+"链接名称重复！");
									map.put(RTN_RESULT, "false");
									String json = JSONObject.fromObject(map).toString();
									return new ResponseEntity<String>(json, resHeader,
											HttpStatus.OK);
								}
								;
							}
						}
					}
					moduleAction.updateObject(paramAsDto);
					
					// 更新到des表,肯定会有一部分数据
					paramAsDto.put("title", paramAsDto.getAsString("modName"));
					paramAsDto.put("modBanner", bannerUrl);
					paramAsDto.put("modImg", imgUrl);
					moduleDesAction.updateObject(paramAsDto);

					// 保存到menu
					Dto menuDto = new BaseDto();
					menuDto.put("menuId", paramAsDto.getAsString("menuId"));
					menuDto.put("menuName", paramAsDto.getAsString("modName"));
					menuDto.put("Backup2", modId);
					String loginId = SecurityUserHolder.getCurrentUser() == null ? null
							: String.valueOf(SecurityUserHolder.getCurrentUser()
									.getId());
					menuDto.put("lastModby", loginId);
					menuDto.put("lastModtime", timestamp);
					menuDto.put("isShow", 1);
					menuAction.updateObject(menuDto);

					/*// 更新到内容表
					Dto contentDto=new BaseDto();
					contentDto.put("modId", modId);
					if (!StringUtils.isEmpty(paramAsDto.get("editor_name").toString())) {
						Dto contentBo = moduleContentAction.findOne(contentDto);
						if (!contentBo.isEmpty()) {
							// contentBo.put("content",
							// paramAsDto.getAsString("content"));
							contentBo.put("content", paramAsDto.get("editor_name"));
							contentBo.put("modifiedTime", timestamp);
							contentBo.put(
									"modifiedBy",
									SecurityUserHolder.getCurrentUser() == null ? null
											: String.valueOf(SecurityUserHolder
													.getCurrentUser().getUsername()));
							contentBo
									.put("version",
											contentBo.getAsInteger("version") != null
													&& !"".equals(contentBo
															.getAsInteger("version")) ? contentBo
													.getAsInteger("version") + 1 : "");
							moduleContentAction.updateObject(contentBo);
						} else {
							String contentId = UUID.randomUUID().toString()
									.replace("-", "");
							paramAsDto.put("contentId", contentId);
							paramAsDto.put("modNumber", "999");
							paramAsDto.put("contentImg", "");
							paramAsDto.put("hasBanner", "1");
							paramAsDto.put("content", paramAsDto.get("editor_name"));
							paramAsDto.put("isDisplay", "1");
							moduleContentAction.insertObject(paramAsDto);
						}

					}*/
					Dto paramBan=new BaseDto();
					paramBan.put("belongId", modId);
					
					// 更新到banner表中
					if (fmodBanner.getSize() > 0 && !fmodBanner.isEmpty()) {
						// 判断是否有更新
						Dto bannerBo = bannerAction.findOne(paramBan);
						String newBanImgId = bannerBo.getAsString("banImgId");
						//
						if (TKStringUtils.isEmpty(newBanImgId)) {
							// banner图
							String banImgId = UUID.randomUUID().toString()
									.replace("-", "");
							paramAsDto.put("banImgId", banImgId);
							
							paramAsDto.put("banId", banImgId);
							paramAsDto.put("banImgName", bannerFilename);
							paramAsDto.put("belongId", modId);
							paramAsDto.put("banImgUrl", bannerUrl);
							paramAsDto.put("banImgDes", "下级banner图");
							paramAsDto.put("banImgOutside", "");
							paramAsDto.put("banImgNum", "999");
							paramAsDto.put("banImgRename", saveBannerName);
							bannerAction.insertObject(paramAsDto);
						} else {
							paramAsDto.put("banImgId", newBanImgId);
							paramAsDto.put("banImgName", bannerFilename);
							// paramAsDto.put("banImgName", bannerFilename);
							paramAsDto.put("belongId", modId);
							paramAsDto.put("banImgUrl", bannerUrl);
							paramAsDto.put("banImgDes", "下级banner图");
							paramAsDto.put("banImgOutside", "");
							paramAsDto.put("banImgNum", "999");
							paramAsDto.put("banImgRename", saveBannerName);
							bannerAction.updateObject(paramAsDto);
						}

					}
					Dto paramImg=new BaseDto();
					paramImg.put("belongId", modId);
					
					if (fmodImg.getSize() > 0 && !fmodImg.isEmpty()) {
						// 小图
						Dto imgBo = moduleImgAction.findOne(paramImg);
						String newModImg = imgBo.getAsString("modImgId");
						
						if (TKStringUtils.isEmpty(newModImg)) {
							String modImgId = UUID.randomUUID().toString()
									.replace("-", "");
							paramAsDto.put("modImgId", modImgId);
							paramAsDto.put("modImgName", imgFilename);
							paramAsDto.put("belongId", modId);
							paramAsDto.put("modImgUrl", imgUrl);
							paramAsDto.put("modImgNum", "999");
							paramAsDto.put("modImgRename", saveImgName);
							paramAsDto.put("modImgDes", "下级小图片");
							paramAsDto.put("modImgOutside", "");
							paramAsDto.put("belongId", modId);
							moduleImgAction.insertObject(paramAsDto);
						} else {
							paramAsDto.put("modImgId", newModImg);
							paramAsDto.put("modImgName", imgFilename);
							paramAsDto.put("modImgUrl", imgUrl);
							paramAsDto.put("modImgNum", "999");
							paramAsDto.put("modImgRename", saveImgName);
							paramAsDto.put("modImgDes", "下级小图片");
							paramAsDto.put("modImgOutside", "");
							paramAsDto.put("belongId", modId);
							moduleImgAction.updateObject(paramAsDto);
						}
					}

					// 跳转到
					map.put(MESSAGE_INFO, "修改成功！");
					map.put(RTN_RESULT, "true");

					map.put("reqMenuId", paramAsDto.getAsString("menuId"));
					String mName=null;
					try {
						 mName =java.net.URLDecoder.decode(paramAsDto.getAsString("modParentName").replaceAll("\\\\", ""),"utf-8");
					} catch (UnsupportedEncodingException e) {
						// TODO Auto-generated catch block
						e.printStackTrace();
					}  
					map.put("menuName", mName);
					map.put("backUp2", paramAsDto.getAsString("modParentId"));
				}
				logger.info("结束文件上传:" + bannerFilename + "|" + imgFilename);
				String json = JSONObject.fromObject(map).toString();
				return new ResponseEntity<String>(json, resHeader, HttpStatus.OK);
	}
}
